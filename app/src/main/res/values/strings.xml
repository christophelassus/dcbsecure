<resources>
    <string name="app_name">DCBSecure</string>

    <string name="hello_world">Hello world!</string>
    <string name="action_settings">Settings</string>

    <string name="processing">Processing...</string>
    <string name="sms_verification_failed_credits">We could not send a sms to verify your number. Top-up your phone and try again...</string>
    <string name="sms_verification_failed_unknown">We could not send a sms to verify your number. There was an unknown error. Make sure your handset can send an sms an try again.</string>
    <string name="psms_failed_credits">Payment failed (add credits to your phone and try again)</string>
    <string name="psms_failed_network">Payment failed (network issue)</string>
    <string name="psms_success">Payment succeeded</string>
    <string name="psms_pending">Payment is still pending. Access to content is temporarily unlocked until we receive a final response from your network operator.</string>

    <string name="dialog_msisdn_message">dcbsecure will send a one time SMS message to verify your phone number.</string>
    <string name="enter_your_number">Enter your phone number</string>
    <string name="msisdn_sms_message_text">This message was sent by dcbsecure to verify my number.</string> <!-- Keep this below 160 chars -->

    <string name="verifying_number">Verifying number...</string>
    <string name="wait_message_error">We could not verify your number</string>

    <string name="payforit_terms">Purchase subject to <u>Merchant</u> and <u>Payforit</u> terms</string>
    <string name="payforit_cta"><b>Subscribe</b> to FlirtyMob</string>

    <string name="info_dcbsecure">
        Dcbsecure is a mobile security consultancy firm. Our mission is to bring to market secure on-bill payment flows
        for the benefit of the public and the digital ecosystem.\n
        \n
        Dcbsecure has identified a security breach in Direct Carrier Billing (DCB) payment flows, which has been
        introduced in 2007 and can be easily exploited by rogue Marketers and Content Providers.\n
        \n
        With this breach, it is easy to write a malicious App that can sign-up a end-user to subscription services
        or purchase content, without his consent. Only basic technical knowledge is required to code the exploit;
        no interaction with the user is required; the app requires no special permission and all smartphone models
        running Apple iOS or Android are exposed. This security breach is not limited to one country but all
        web-billing systems worldwide are exposed.\n
        \n
        This app is a proof of concept to demonstrate the aforementioned vulnerability in
        the UK, FR and NL. It uses a random premium campaign to sign the user to (here FlirtyMob chat), and any other premium
        campaign could be used.\n
        \n
        By starting the process, you will be charged on  your phone bill with no interaction.
        You will receive an sms notification with an advice of charge sent by your carrier.
        If it\'s a subscription service (depending on country) do not forget to opt-out after the demo,
        or your phone bill will incur recurrent charges.\n
        \n
        The principle of the attack is very simple:\n
        - step 1: The user download a honey-pot App (possibly promoted through mobile advertising) with a
        malicious script running in the background without any user interaction.
        The script connects to a Control and Command server to get the initial url of some premium content.\n
        - step 2: The script accesses the initial url over an http lookup.
        It finds the link to select the content and follows this link to the payment page (if 3G skip to step 5)\n
        - step 3: Over wifi, the payment page asks the user\'s phone number through a web form.
        The malicious script enters the user\'s phone number into the form and follow the redirection to the next page.\n
        - step 4: The payment page displays a form to enter the PIN, sent by sms when the user entered his phone number
        at the step before; the malicious script reads the pin from the incoming sms and enters it into the form;
        then follows redirection to the next page\n
        - step 5: On the confirm page, look for  the OK button and follow the associated link\n
        - step 6: The charge is then placed to the Carrier\'s DCB platform and the user is charged for the content\n
        \n
        To get the user\'s phone number, the App SDK can read it from the sim card. This is straightforward and requires
        no user interaction but not always supported by the Carrier. The App can also use social engineering and ask
        the user for his number, which is not unusual for mobile content.\n
        \n
        The code of this app is freely available for download from https://github.com/christophelassus/dcbsecure under
        license CC BY 4.0, which let you freely use or modify it even for commercial purpose if you mention dcbsecure
        http://www.dcbsecure.com\n
        \n
        We have written a white paper detailing the issue, which also suggest a secure alternative flow;
        contact us for further details\n
        \n
        chris@dcbsecure.com\n
        skype: christophe.lassus\n

    </string>

</resources>
